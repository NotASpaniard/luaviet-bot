import { EmbedBuilder } from 'discord.js';
import type { PrefixCommand } from '../types/command.js';
import { getStore } from '../store/store.js';
import { readFileSync } from 'node:fs';
import path from 'node:path';

// lv farm - Xem tr·∫°ng th√°i n√¥ng tr·∫°i
export const prefixFarm: PrefixCommand = {
  name: 'farm',
  description: 'Xem tr·∫°ng th√°i n√¥ng tr·∫°i',
  async execute(message, args) {
    const store = getStore();
    const user = store.getUser(message.author.id);
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    
    // T√≠nh th·ªùi gian c√≤n l·∫°i cho farm
    let farmStatus = 'Kh√¥ng c√≥ c√¢y ƒëang tr·ªìng';
    let progressBar = '';
    
    if (user.farm.plantedCrop.type) {
      const now = Date.now();
      const cropConfig = gameConfig.crops[user.farm.plantedCrop.type];
      
      if (now < user.farm.plantedCrop.harvestAt!) {
        const totalTime = user.farm.plantedCrop.harvestAt! - user.farm.plantedCrop.plantedAt!;
        const elapsed = now - user.farm.plantedCrop.plantedAt!;
        const remaining = user.farm.plantedCrop.harvestAt! - now;
        const progress = Math.floor((elapsed / totalTime) * 100);
        
        // T·∫°o progress bar
        const filled = Math.floor(progress / 10);
        progressBar = '[' + '‚ñà'.repeat(filled) + '‚ñë'.repeat(10 - filled) + `] ${progress}%`;
        
        farmStatus = `üå± ƒêang tr·ªìng ${cropConfig.emoji} ${cropConfig.name}\n‚è∞ C√≤n ${Math.ceil(remaining / 60000)} ph√∫t\n${progressBar}`;
      } else {
        farmStatus = `üåæ ${cropConfig.emoji} ${cropConfig.name} ƒë√£ ch√≠n, c√≥ th·ªÉ thu ho·∫°ch!`;
      }
    }
    
    // Hi·ªÉn th·ªã c√°c lo·∫°i c√¢y c√≥ th·ªÉ tr·ªìng
    const availableCrops = Object.entries(gameConfig.crops)
      .filter(([_, config]: [string, any]) => user.farm.level >= config.levelRequired)
      .map(([key, config]: [string, any]) => `${config.emoji} ${config.name} (Level ${config.levelRequired})`)
      .join('\n');
    
    const embed = new EmbedBuilder()
      .setTitle('üåæ N√¥ng Tr·∫°i')
      .setColor('#228B22')
      .addFields(
        { name: 'üèóÔ∏è Farm Level', value: `${user.farm.level}`, inline: true },
        { name: 'üå± Tr·∫°ng th√°i', value: farmStatus, inline: false },
        { name: 'üåæ C√≥ th·ªÉ tr·ªìng', value: availableCrops || 'C·∫ßn n√¢ng c·∫•p farm', inline: false }
      )
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// lv farm plant <t√™n_c√¢y> - Gieo tr·ªìng
export const prefixFarmPlant: PrefixCommand = {
  name: 'farm_plant',
  description: 'Gieo tr·ªìng c√¢y: lv farm plant <t√™n_c√¢y>',
  async execute(message, args) {
    const cropType = args[0]?.toLowerCase();
    if (!cropType) {
      await message.reply('C√∫ ph√°p: lv farm plant <lua|ngo|ca_rot|ca_chua>');
      return;
    }
    
    const store = getStore();
    const result = store.plantCrop(message.author.id, cropType);
    
    if (!result.success) {
      await message.reply(result.message);
      return;
    }
    
    const embed = new EmbedBuilder()
      .setTitle('üå± Tr·ªìng C√¢y')
      .setColor('#00FF00')
      .setDescription(result.message)
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// lv farm harvest - Thu ho·∫°ch
export const prefixFarmHarvest: PrefixCommand = {
  name: 'farm_harvest',
  description: 'Thu ho·∫°ch n√¥ng s·∫£n',
  async execute(message) {
    const store = getStore();
    const result = store.harvestCrop(message.author.id);
    
    if (!result.success) {
      await message.reply(result.message);
      return;
    }
    
    // C·ªông XP cho harvest
    const xpResult = store.addXP(message.author.id, 20);
    
    const embed = new EmbedBuilder()
      .setTitle('üåæ Thu Ho·∫°ch')
      .setColor('#FFD700')
      .setDescription(`${result.message}\n${xpResult.message}`)
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// lv farm upgrade - N√¢ng c·∫•p farm
export const prefixFarmUpgrade: PrefixCommand = {
  name: 'farm_upgrade',
  description: 'N√¢ng c·∫•p farm',
  async execute(message) {
    const store = getStore();
    const result = store.upgradeFarm(message.author.id);
    
    if (!result.success) {
      await message.reply(result.message);
      return;
    }
    
    const embed = new EmbedBuilder()
      .setTitle('üèóÔ∏è N√¢ng C·∫•p Farm')
      .setColor('#FF8C00')
      .setDescription(result.message)
      .setTimestamp();
    
    await message.reply({ embeds: [embed] });
  }
};

// Main farm command handler
export const prefixFarmMain: PrefixCommand = {
  name: 'farm',
  description: 'Qu·∫£n l√Ω n√¥ng tr·∫°i: farm/plant/harvest/upgrade',
  async execute(message, args) {
    const subcommand = args[0]?.toLowerCase();
    
    if (subcommand === 'plant') {
      await prefixFarmPlant.execute(message, args.slice(1));
    } else if (subcommand === 'harvest') {
      await prefixFarmHarvest.execute(message, []);
    } else if (subcommand === 'upgrade') {
      await prefixFarmUpgrade.execute(message, []);
    } else {
      // Default: show farm status
      await prefixFarm.execute(message, []);
    }
  }
};

export const prefixes: PrefixCommand[] = [prefixFarmMain];
