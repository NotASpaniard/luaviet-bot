import { EmbedBuilder, PermissionFlagsBits } from 'discord.js';
import type { PrefixCommand } from '../types/command.js';

// L·ªánh t·∫°o giveaway
export const prefixGiveaway: PrefixCommand = {
  name: 'ga',
  description: 'T·∫°o giveaway m·ªõi (ch·ªâ role Giveaway/Admin)',
  async execute(message, args) {
    // Ki·ªÉm tra quy·ªÅn
    const hasPermission = message.member?.permissions.has(PermissionFlagsBits.Administrator) ||
                         message.member?.roles.cache.some(role => role.name === 'Giveaway');
    
    if (!hasPermission) {
      await message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (args.length < 3) {
      await message.reply('C√∫ ph√°p: `lv ga <s·ªë gi·ªù> <s·ªë ng∆∞·ªùi win> <n·ªôi dung>` ho·∫∑c `lv ga <s·ªë gi·ªù> <s·ªë ng∆∞·ªùi win> <role y√™u c·∫ßu> <n·ªôi dung>`');
      return;
    }

    const hours = parseInt(args[0]);
    const winners = parseInt(args[1]);
    
    if (isNaN(hours) || isNaN(winners) || hours <= 0 || winners <= 0) {
      await message.reply('‚ùå S·ªë gi·ªù v√† s·ªë ng∆∞·ªùi th·∫Øng ph·∫£i l√† s·ªë d∆∞∆°ng.');
      return;
    }

    // Ki·ªÉm tra xem c√≥ role y√™u c·∫ßu kh√¥ng
    let requiredRole = null;
    let content = '';
    
    if (args.length >= 4 && args[2].startsWith('<@&') && args[2].endsWith('>')) {
      // C√≥ role y√™u c·∫ßu
      requiredRole = args[2];
      content = args.slice(3).join(' ');
    } else {
      // Kh√¥ng c√≥ role y√™u c·∫ßu
      content = args.slice(2).join(' ');
    }

    if (!content) {
      await message.reply('‚ùå N·ªôi dung giveaway kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
      return;
    }

    const endTime = Date.now() + (hours * 60 * 60 * 1000);
    const endDate = new Date(endTime);

    const embed = new EmbedBuilder()
      .setAuthor({ 
        name: 'L·ª≠a Vi·ªát', 
        iconURL: message.guild?.iconURL() || undefined 
      })
      .setDescription(`## ${content} üé´\n\n<:LV_orange:1410543066435162174> Nh·∫•n <a:LV_fire:1413427579326824479> ƒë·ªÉ tham gia\n<:LV_orange:1410543066435162174> ƒê·∫øm ng∆∞·ª£c: <t:${Math.floor(endTime / 1000)}:R>\n<:LV_orange:1410543066435162174> T·ªï ch·ª©c b·ªüi: <@${message.author.id}>`)
      .setColor('#f46026')
      .setThumbnail(message.author.displayAvatarURL())
      .setFooter({ 
        text: `Giveaway v·ªõi ${winners} gi·∫£i ¬∑ <t:${Math.floor(endTime / 1000)}:F>`, 
        iconURL: message.guild?.iconURL() || undefined 
      })
      .setTimestamp();

    if (requiredRole) {
      embed.addFields({ name: 'üìã Y√™u c·∫ßu', value: `Role: ${requiredRole}`, inline: false });
    }

    const giveawayMessage = await (message.channel as any).send({ embeds: [embed] });
    await giveawayMessage.react('<a:LV_fire:1413427579326824479>');

    // L∆∞u th√¥ng tin giveaway (c√≥ th·ªÉ l∆∞u v√†o database ho·∫∑c file)
    // ·ªû ƒë√¢y t√¥i s·∫Ω ch·ªâ log ra console
    console.log(`Giveaway created: ${giveawayMessage.id}, ends at ${endDate.toISOString()}, winners: ${winners}, content: ${content}`);

    await message.reply(`‚úÖ ƒê√£ t·∫°o giveaway! ID: ${giveawayMessage.id}`);
  }
};

// L·ªánh reroll giveaway
export const prefixReroll: PrefixCommand = {
  name: 'reroll',
  description: 'Ch·ªçn l·∫°i ng∆∞·ªùi th·∫Øng cu·ªôc (ch·ªâ role Giveaway/Admin)',
  async execute(message, args) {
    // Ki·ªÉm tra quy·ªÅn
    const hasPermission = message.member?.permissions.has(PermissionFlagsBits.Administrator) ||
                         message.member?.roles.cache.some(role => role.name === 'Giveaway');
    
    if (!hasPermission) {
      await message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (args.length < 1) {
      await message.reply('C√∫ ph√°p: `lv reroll <id_message>`');
      return;
    }

    const messageId = args[0];
    
    try {
      const giveawayMessage = await message.channel.messages.fetch(messageId);
      
      if (!giveawayMessage) {
        await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y tin nh·∫Øn giveaway.');
        return;
      }

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† giveaway kh√¥ng
      if (!giveawayMessage.embeds[0]?.title?.includes('GIVEAWAY')) {
        await message.reply('‚ùå Tin nh·∫Øn n√†y kh√¥ng ph·∫£i l√† giveaway.');
        return;
      }

      // L·∫•y danh s√°ch ng∆∞·ªùi tham gia
      const reaction = giveawayMessage.reactions.cache.get('<a:LV_fire:1413427579326824479>');
      if (!reaction) {
        await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y reaction üî• trong giveaway.');
        return;
      }

      const participants = await reaction.users.fetch();
      const validParticipants = participants.filter(user => !user.bot);

      if (validParticipants.size === 0) {
        await message.reply('‚ùå Kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o.');
        return;
      }

      // Ch·ªçn ng∆∞·ªùi th·∫Øng ng·∫´u nhi√™n
      const winners = Array.from(validParticipants.values()).sort(() => 0.5 - Math.random()).slice(0, 1);
      
      const embed = new EmbedBuilder()
        .setTitle('<a:LV_giveaway1:1428329034525442150> GIVEAWAY REROLL <a:LV_giveaway1:1428329034525442150>')
        .setDescription(`**Ng∆∞·ªùi th·∫Øng m·ªõi:** ${winners.map(w => `<@${w.id}>`).join(', ')}`)
        .setColor('#f46026')
        .setTimestamp();

      await message.reply({ embeds: [embed] });

    } catch (error) {
      await message.reply('‚ùå L·ªói khi reroll giveaway.');
      console.error('Reroll error:', error);
    }
  }
};

// L·ªánh k·∫øt th√∫c giveaway s·ªõm
export const prefixEndGiveaway: PrefixCommand = {
  name: 'end',
  description: 'K·∫øt th√∫c giveaway s·ªõm (ch·ªâ role Giveaway/Admin)',
  async execute(message, args) {
    // Ki·ªÉm tra quy·ªÅn
    const hasPermission = message.member?.permissions.has(PermissionFlagsBits.Administrator) ||
                         message.member?.roles.cache.some(role => role.name === 'Giveaway');
    
    if (!hasPermission) {
      await message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    if (args.length < 1) {
      await message.reply('C√∫ ph√°p: `lv end <id_message>`');
      return;
    }

    const messageId = args[0];
    
    try {
      const giveawayMessage = await message.channel.messages.fetch(messageId);
      
      if (!giveawayMessage) {
        await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y tin nh·∫Øn giveaway.');
        return;
      }

      // Ki·ªÉm tra xem c√≥ ph·∫£i l√† giveaway kh√¥ng
      if (!giveawayMessage.embeds[0]?.title?.includes('GIVEAWAY')) {
        await message.reply('‚ùå Tin nh·∫Øn n√†y kh√¥ng ph·∫£i l√† giveaway.');
        return;
      }

      // L·∫•y danh s√°ch ng∆∞·ªùi tham gia
      const reaction = giveawayMessage.reactions.cache.get('<a:LV_fire:1413427579326824479>');
      if (!reaction) {
        await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y reaction üî• trong giveaway.');
        return;
      }

      const participants = await reaction.users.fetch();
      const validParticipants = participants.filter(user => !user.bot);

      if (validParticipants.size === 0) {
        await message.reply('‚ùå Kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o.');
        return;
      }

      // Ch·ªçn ng∆∞·ªùi th·∫Øng ng·∫´u nhi√™n
      const winners = Array.from(validParticipants.values()).sort(() => 0.5 - Math.random()).slice(0, 1);
      
      const embed = new EmbedBuilder()
        .setTitle('<a:LV_giveaway1:1428329034525442150> GIVEAWAY K·∫æT TH√öC <a:LV_giveaway1:1428329034525442150>')
        .setDescription(`**Ng∆∞·ªùi th·∫Øng:** ${winners.map(w => `<@${w.id}>`).join(', ')}\n\nCh√∫c m·ª´ng! üéä`)
        .setColor('#f46026')
        .setTimestamp();

      await giveawayMessage.edit({ embeds: [embed] });
      await message.reply('‚úÖ ƒê√£ k·∫øt th√∫c giveaway!');

    } catch (error) {
      await message.reply('‚ùå L·ªói khi k·∫øt th√∫c giveaway.');
      console.error('End giveaway error:', error);
    }
  }
};

// L·ªánh xem danh s√°ch giveaway
export const prefixGiveawayList: PrefixCommand = {
  name: 'glist',
  description: 'Xem c√°c giveaway ƒëang di·ªÖn ra (ch·ªâ role Giveaway/Admin)',
  async execute(message) {
    // Ki·ªÉm tra quy·ªÅn
    const hasPermission = message.member?.permissions.has(PermissionFlagsBits.Administrator) ||
                         message.member?.roles.cache.some(role => role.name === 'Giveaway');
    
    if (!hasPermission) {
      await message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.');
      return;
    }

    // ·ªû ƒë√¢y t√¥i s·∫Ω ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o v√¨ ch∆∞a c√≥ database l∆∞u tr·ªØ giveaway
    const embed = new EmbedBuilder()
      .setTitle('üìã Danh S√°ch Giveaway')
      .setDescription('Hi·ªán t·∫°i ch∆∞a c√≥ giveaway n√†o ƒëang di·ªÖn ra.')
      .setColor('#FFA500')
      .setTimestamp();

    await message.reply({ embeds: [embed] });
  }
};

export const prefixes: PrefixCommand[] = [prefixGiveaway, prefixReroll, prefixEndGiveaway, prefixGiveawayList];
